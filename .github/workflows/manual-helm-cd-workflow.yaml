# Copyright (C) 2024 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

name: GenAIInfra Helm CD workflow on manual event
on:
  workflow_dispatch:
    inputs:
      workloads:
        default: ""
        required: false
        type: string
        description: "workloads to test, empty for testing all helm charts"
      tag:
        default: "latest"
        description: "Image tag to be tested"
        required: true
        type: string
      opea_branch:
        default: "main"
        description: 'OPEA branch for image build'
        required: false
        type: string

env:
  CHARTS_DIR: "helm-charts"

jobs:
  get-build-matrix:
    runs-on: ubuntu-latest
    outputs:
      run_matrix: ${{ steps.get-services.outputs.run_matrix }}
    steps:
      - name: Checkout out Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ inputs.opea_branch }}

      - name: Get test Services
        id: get-services
        run: |
          set -x
          run_matrix="{\"include\":["
          if [[ -z "${{ inputs.workloads }}" ]]; then
            find "$CHARTS_DIR" -mindepth 1 -maxdepth 1 -type d ! -name "common" -exec basename {} \; | while read -r subfolder; do
              for file in "$CHARTS_DIR/$subfolder"/*values.yaml; do
                if [ -f "$file" ]; then
                  if [[ "$file" == *"nv-values.yaml" ]] || [[ "$file" == *"hpa-values.yaml" ]]; then
                    continue
                  fi
                  filename=$(basename "$file" .yaml)
                  if [[ "$filename" == *"gaudi"* ]]; then
                    run_matrix="${run_matrix}{\"example\":\"${subfolder}\",\"hardware\":\"gaudi\", \"valuefile\":\"${filename}\"},"
                  else
                    run_matrix="${run_matrix}{\"example\":\"${subfolder}\",\"hardware\":\"xeon\", \"valuefile\":\"${filename}\"},"
                  fi
                fi
              done
            done
            find "$CHARTS_DIR/common" -mindepth 1 -maxdepth 1 -type d -exec basename {} \; | while read -r subfolder; do
              for file in "$CHARTS_DIR/common/$subfolder"/*values.yaml; do
                if [ -f "$file" ]; then
                  if [[ "$file" == *"nv-values.yaml" ]] || [[ "$file" == *"hpa-values.yaml" ]]; then
                    continue
                  fi
                  filename=$(basename "$file" .yaml)
                  if [[ "$filename" == *"gaudi"* ]]; then
                    run_matrix="${run_matrix}{\"example\":\"common/${subfolder}\",\"hardware\":\"gaudi\", \"valuefile\":\"${filename}\"},"
                  else
                    run_matrix="${run_matrix}{\"example\":\"common/${subfolder}\",\"hardware\":\"xeon\", \"valuefile\":\"${filename}\"},"
                  fi
                fi
              done
            done
          else
            service_list=($(echo ${{ github.event.inputs.workloads }} | tr ',' ' '))
            for service in $service_list; do
              for file in "$CHARTS_DIR/$service"/*values.yaml; do
                if [ -f "$file" ]; then
                  if [ "$file" == *"nv-values.yaml" ] || [ "$file" == *"hpa-values.yaml" ]; then
                    continue
                  fi
                  filename=$(basename "$file" .yaml)
                  if [[ "$filename" == *"gaudi"* ]]; then
                    run_matrix="${run_matrix}{\"example\":\"$service\",\"hardware\":\"gaudi\", \"valuefile\":\"${filename}\"},"
                  else
                    run_matrix="${run_matrix}{\"example\":\"$service\",\"hardware\":\"xeon\", \"valuefile\":\"${filename}\"},"
                  fi
                fi
              done
            done
          fi
          run_matrix=$run_matrix"]}"
          echo "run_matrix=${run_matrix}"
          echo "run_matrix=${run_matrix}" >> $GITHUB_OUTPUT

  helm-release:
    needs: get-build-matrix
    strategy:
      matrix: ${{ fromJSON(needs.get-build-matrix.outputs.run_matrix) }}
    uses: ./.github/workflows/_helm-e2e.yaml
    with:
      tag: ${{ inputs.tag }}
      workload: ${{ matrix.example }}
      hardware: ${{ matrix.hardware }}
      valuefile: ${{ matrix.valuefile }}
    secrets: inherit
