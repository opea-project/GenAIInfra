# Copyright (C) 2024 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

name: GenAIInfra Helm CD workflow on manual event
on:
  workflow_dispatch:
    inputs:
      workloads:
        default: ""
        required: false
        type: string
        description: "workloads to test, empty for testing all helm charts"
      tag:
        default: "latest"
        description: "Image tag to be tested"
        required: true
        type: string
      nodes:
        default: "xeon,gaudi"
        required: true
        type: string
        description: 'Hardwares used to run tests'

env:
  CHARTS_DIR: "helm-charts"

jobs:
  get-build-matrix:
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.get-services.outputs.services }}
      nodes: ${{ steps.get-services.outputs.nodes }}
    steps:
      - name: Checkout out Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get test Services
        id: get-services
        run: |
          set -x
          if [[ -z "${{ inputs.workloads }}" ]]; then
            subfolders=$(find "$CHARTS_DIR" -mindepth 1 -maxdepth 1 -type d ! -name "common" -exec basename {} \; | sed 's/^/"/; s/$/"/' | paste -sd, -)
            common_subfolders=$(find "$CHARTS_DIR/common" -mindepth 1 -maxdepth 1 -type d -exec basename {} \; | sed 's|^|"common/|; s/$/"/' | paste -sd, -)
            services="[$subfolders,$common_subfolders]"
            echo "services=$services" >> $GITHUB_OUTPUT
          else
            service_list=($(echo ${{ github.event.inputs.workloads }} | tr ',' ' '))
            services=$(printf '%s\n' "${service_list[@]}" | sort -u | jq -R '.' | jq -sc '.')
            echo "services=$services" >> $GITHUB_OUTPUT
          fi
          node_list=($(echo ${{ github.event.inputs.nodes }} | tr ',' ' '))
          nodes=$(printf '%s\n' "${node_list[@]}" | sort -u | jq -R '.' | jq -sc '.')
          echo "nodes=$nodes" >> $GITHUB_OUTPUT

  helm-release:
    needs: get-build-matrix
    strategy:
      matrix:
        workload: ${{ fromJSON(needs.get-build-matrix.outputs.services) }}
        node: ${{ fromJSON(needs.get-build-matrix.outputs.nodes) }}
    uses: ./.github/workflows/_helm-e2e.yaml
    with:
      tag: ${{ inputs.tag }}
      workload: ${{ matrix.workload }}
      hardware: ${{ matrix.node }}
    secrets: inherit
