# Copyright (C) 2024 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

name: To Test a Helm Job for call
permissions: read-all
on:
  workflow_call:
    inputs:
      workload:
        default: "chatqna"
        required: true
        type: string
        description: "workload to test, chatqna or common/asr"
      dockerhub:
        default: "false"
        required: false
        type: string
        description: "Set to true if you want to use released docker images at dockerhub. By default using internal docker registry."
      tag:
        default: "latest"
        required: false
        type: string
      hardware:
        default: "k8s-xeon"
        required: true
        type: string
      valuefile:
        default: "values"
        required: true
        type: string

env:
  CHARTS_DIR: "helm-charts"

jobs:
####################################################################################################
# Helm Test
####################################################################################################
  helm-test:
    runs-on: ${{ inputs.hardware }}
    continue-on-error: true
    outputs:
      should_cleanup: ${{ steps.set_boolean.outputs.should_cleanup }}
    steps:
      - name: Clean Up Working Directory
        run: sudo rm -rf ${{github.workspace}}/*

      - name: Get checkout ref
        id: get-checkout-ref
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ] || [ "${{ github.event_name }}" == "pull_request_target" ]; then
            CHECKOUT_REF=refs/pull/${{ github.event.number }}/merge
          else
            CHECKOUT_REF=${{ github.ref }}
          fi
          echo "CHECKOUT_REF=${CHECKOUT_REF}" >> $GITHUB_OUTPUT
          echo "checkout ref ${CHECKOUT_REF}"

      - name: Checkout out Repo
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.get-checkout-ref.outputs.CHECKOUT_REF }}
          fetch-depth: 0

      - name: Set variables
        env:
          workload_path: ${{ inputs.workload }}
        run: |
          CHART_NAME="${workload_path##*/}"
          echo "CHART_NAME=$CHART_NAME" >> $GITHUB_ENV
          echo "RELEASE_NAME=${CHART_NAME}$(date +%d%H%M%S)" >> $GITHUB_ENV
          echo "NAMESPACE=infra-${CHART_NAME}-$(head -c 4 /dev/urandom | xxd -p)" >> $GITHUB_ENV
          echo "ROLLOUT_TIMEOUT_SECONDS=600s" >> $GITHUB_ENV
          echo "TEST_TIMEOUT_SECONDS=600s" >> $GITHUB_ENV
          echo "KUBECTL_TIMEOUT_SECONDS=60s" >> $GITHUB_ENV
          echo "should_cleanup=false" >> $GITHUB_ENV
          echo "skip_validate=false" >> $GITHUB_ENV
          echo "RELEASENAME=$RELEASE_NAME"
          echo "NAMESPACE=$NAMESPACE"
          echo "CHART_FOLDER=$CHARTS_DIR/${workload_path}" >> $GITHUB_ENV

      - name: Initialize chart testing
        run: |
          # Replace values for CI test environment
          pushd helm-charts
          if [ "${{ inputs.dockerhub }}" = "true" ]; then
            echo "Use released docker images"
          else
            echo "Use internal docker registry"
            # insert a prefix before opea/.*, the prefix is OPEA_IMAGE_REPO
            find . -name '*values.yaml' -type f -exec sed -i "s#repository: opea/*#repository: ${OPEA_IMAGE_REPO}opea/#g" {} \;
          fi
          # set OPEA image tag to ${{ inputs.tag }}
          find . -name '*values.yaml' -type f -exec sed -i 's#tag: "latest"#tag: ${{ inputs.tag }}#g' {} \;
          popd

      - name: Helm install
        id: install
        env:
          GOOGLE_CSE_ID: ${{ secrets.GOOGLE_CSE_ID }}
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
          HFTOKEN: ${{ secrets.HF_TOKEN }}
          FINNHUB_API_KEY: ${{ secrets.FINNHUB_API_KEY }}
          FINANCIAL_DATASETS_API_KEY: ${{ secrets.FINANCIAL_DATASETS_API_KEY }}
          # External LLM configuration for external-llm-values.yaml testing
          LLM_SERVER_HOST_IP: ${{ secrets.LLM_SERVER_HOST_IP }}
          LLM_SERVICE_HOST_IP: ${{ secrets.LLM_SERVER_HOST_IP }}
          LLM_MODEL: ${{ secrets.LLM_MODEL }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          LLM_SERVER_PORT: ${{ secrets.LLM_SERVER_PORT }}
          LLM_SERVICE_PORT: ${{ secrets.LLM_SERVER_PORT }}
        run: |
          set -x
          USER_ID=$(whoami)
          CHART_MOUNT=/data2/hf_model
          echo "should_cleanup=true" >> $GITHUB_ENV
          value_file="${{ inputs.valuefile }}.yaml"
          if [[ ! -f ${{ env.CHART_FOLDER }}/${value_file} ]]; then
            echo "No value file found, exist test!"
            echo "skip_validate=true" >> $GITHUB_ENV
            echo "should_cleanup=false" >> $GITHUB_ENV
            exit 0
          fi
          helm-charts/scripts/update_dependency.sh && helm dependency update ${{ env.CHART_FOLDER }}
          for img in `helm template -n $NAMESPACE -f ${{ env.CHART_FOLDER }}/${value_file} $RELEASE_NAME ${{ env.CHART_FOLDER }} | grep 'image:' | grep 'opea/' | awk '{print $2}' | xargs`;
          do
            if ! .github/workflows/scripts/e2e/chart_test.sh check_local_opea_image "$img"; then
            echo "skip_validate=true" >> $GITHUB_ENV
            echo "should_cleanup=false" >> $GITHUB_ENV
            exit 1
            fi
            # increase helm install wait for for vllm-gaudi case
            if [[ $img == *"vllm-gaudi"* ]]; then
                ROLLOUT_TIMEOUT_SECONDS=900s
            fi
          done

          # Prepare external LLM arguments for external-llm-values.yaml files
          external_llm_args=""
          if [[ "${value_file}" == *"external-llm"* ]]; then
            # Chart-specific mapping for environment variables (use LLM_SERVER_HOST_IP for all)
            if [[ "${{ env.CHART_NAME }}" == "chatqna" ]]; then
              if [[ -n "${{ env.LLM_SERVER_HOST_IP }}" ]]; then
                external_llm_args="$external_llm_args --set externalLLM.LLM_SERVER_HOST_IP=${{ env.LLM_SERVER_HOST_IP }}"
              fi
              if [[ -n "${{ env.LLM_SERVER_PORT }}" ]]; then
                external_llm_args="$external_llm_args --set externalLLM.LLM_SERVER_PORT=${{ env.LLM_SERVER_PORT }}"
              fi
            else
              # DocSum/CodeGen use LLM_SERVICE_HOST_IP but we map from LLM_SERVER_HOST_IP
              if [[ -n "${{ env.LLM_SERVER_HOST_IP }}" ]]; then
                external_llm_args="$external_llm_args --set externalLLM.LLM_SERVICE_HOST_IP=${{ env.LLM_SERVER_HOST_IP }}"
              fi
              if [[ -n "${{ env.LLM_SERVER_PORT }}" ]]; then
                external_llm_args="$external_llm_args --set externalLLM.LLM_SERVICE_PORT=${{ env.LLM_SERVER_PORT }}"
              fi
            fi
            if [[ -n "${{ env.LLM_MODEL }}" ]]; then
              external_llm_args="$external_llm_args --set externalLLM.LLM_MODEL=${{ env.LLM_MODEL }}"
              # CodeGen also needs LLM_MODEL_ID
              if [[ "${{ env.CHART_NAME }}" == "codegen" ]]; then
                external_llm_args="$external_llm_args --set externalLLM.LLM_MODEL_ID=${{ env.LLM_MODEL }}"
              fi
            fi
            if [[ -n "${{ env.OPENAI_API_KEY }}" ]]; then
              external_llm_args="$external_llm_args --set externalLLM.OPENAI_API_KEY=${{ env.OPENAI_API_KEY }}"
            fi
            echo "External LLM configuration detected for ${{ env.CHART_NAME }}, adding arguments: $external_llm_args"
          fi

          if ! helm install --create-namespace --namespace $NAMESPACE --wait \
              --timeout "$ROLLOUT_TIMEOUT_SECONDS" \
              --set GOOGLE_API_KEY=${{ env.GOOGLE_API_KEY }} \
              --set GOOGLE_CSE_ID=${{ env.GOOGLE_CSE_ID }} \
              --set web-retriever.GOOGLE_API_KEY=${{ env.GOOGLE_API_KEY }} \
              --set web-retriever.GOOGLE_CSE_ID=${{ env.GOOGLE_CSE_ID }} \
              --set VLLM_SKIP_WARMUP=true \
              --set vllm.VLLM_SKIP_WARMUP=true \
              --set research-agent.FINNHUB_API_KEY=${{ env.FINNHUB_API_KEY }} \
              --set research-agent.FINANCIAL_DATASETS_API_KEY=${{ env.FINANCIAL_DATASETS_API_KEY }} \
              --set global.HUGGINGFACEHUB_API_TOKEN=${{ env.HFTOKEN }} \
              --set global.HF_TOKEN=${{ env.HFTOKEN }} \
              --set global.modelUseHostPath=${CHART_MOUNT} \
              ${external_llm_args} \
              --values ${{ env.CHART_FOLDER }}/${value_file} \
              $RELEASE_NAME ${{ env.CHART_FOLDER }} ; then
            echo "Failed to install chart ${{ inputs.workload }}"
            echo "skip_validate=true" >> $GITHUB_ENV
            .github/workflows/scripts/e2e/chart_test.sh dump_pods_status $NAMESPACE
            exit 1
          fi

      - name: Validate e2e test
        if: always()
        run: |
          set -x
          if $skip_validate; then
            echo "Skip validate"
          else
            chart=${{ env.CHART_NAME }}
            if ! helm test -n $NAMESPACE $RELEASE_NAME --logs --timeout "$TEST_TIMEOUT_SECONDS" ; then
                echo "Chart ${chart} test failed, dumping pods logs ..."
                .github/workflows/scripts/e2e/chart_test.sh dump_all_pod_logs $NAMESPACE
                exit 1
            else
                echo "Chart ${chart} test succeed!"
                exit 0
            fi
          fi

      - name: Helm uninstall
        if: always()
        run: |
          if $should_cleanup; then
            helm uninstall $RELEASE_NAME --namespace $NAMESPACE
            if ! kubectl delete ns $NAMESPACE --timeout=$KUBECTL_TIMEOUT_SECONDS; then
              kubectl delete pods --namespace $NAMESPACE --force --grace-period=0 --all
              kubectl delete ns $NAMESPACE --force --grace-period=0 --timeout=$KUBECTL_TIMEOUT_SECONDS
            fi
          fi
