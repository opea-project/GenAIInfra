# Copyright (C) 2024 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

name: E2E test with helm charts

on:
  pull_request:
    branches: [main]
    types: [opened, reopened, ready_for_review, synchronize] # added `ready_for_review` since draft is skipped
    paths:
      - helm-charts/**
      - .github/workflows/chart-e2e.yaml
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  CHARTS_DIR: "helm-charts"

jobs:
  job1:
    name: Get-test-matrix
    runs-on: ubuntu-latest
    outputs:
      run_matrix: ${{ steps.get-test-matrix.outputs.run_matrix }}
    steps:
      - name: Checkout out Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get test matrix
        id: get-test-matrix
        run: |
          changed_charts=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | \
          grep "^$CHARTS_DIR/" | \
          grep -vE 'README.md|common|update_dependency.sh' | \
          cut -d'/' -f2 | sort -u )
          run_matrix="{\"include\":["
          for chart in ${changed_charts}; do
            #run_matrix="${run_matrix}\"${chart}\","
            run_matrix="${run_matrix}{\"example\":\"${chart}\",\"hardware\":\"gaudi\"},"
            run_matrix="${run_matrix}{\"example\":\"${chart}\",\"hardware\":\"xeon\"},"
          done
          run_matrix=$run_matrix"]}"
          echo "run_matrix=${run_matrix}"
          echo "run_matrix=${run_matrix}" >> $GITHUB_OUTPUT

  Chart-test:
    needs: job1
    if: always() && ${{ needs.job1.outputs.run_matrix.example.length }} > 0
    strategy:
      matrix: ${{ fromJSON(needs.job1.outputs.run_matrix) }}
    runs-on: ${{ matrix.hardware }}
    continue-on-error: true
    outputs:
      should_cleanup: ${{ steps.set_boolean.outputs.should_cleanup }}
    steps:
      - name: E2e test chart
        run: |
          echo "Matrix - chart: ${{ matrix.example }}"

      - name: Clean Up Working Directory
        run: sudo rm -rf ${{github.workspace}}/*

      - name: Checkout out Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set variables
        run: |
          echo "RELEASE_NAME=${{ matrix.example }}$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV
          echo "NAMESPACE=${{ matrix.example }}-$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV
          echo "ROLLOUT_TIMEOUT_SECONDS=600s" >> $GITHUB_ENV
          echo "KUBECTL_TIMEOUT_SECONDS=60s" >> $GITHUB_ENV
          echo "should_cleanup=false" >> $GITHUB_ENV
          echo "skip_validate=false" >> $GITHUB_ENV
          echo "RELEASENAME=$RELEASE_NAME"
          echo "NAMESPACE=$NAMESPACE"

      - name: Initialize chart testing
        run: |
          .github/workflows/scripts/e2e/chart_test.sh init_${{ matrix.example }}

      - name: Helm install
        id: install
        run: |
          echo "should_cleanup=true" >> $GITHUB_ENV
          helm-charts/update_dependency.sh && helm dependency update helm-charts/${{ matrix.example }}
          value_file="values.yaml"
          if [ "${{ matrix.hardware }}" == "gaudi" ]; then
            value_file="gaudi-values.yaml"
          fi
          if ! helm install --create-namespace --namespace $NAMESPACE --wait --timeout "$ROLLOUT_TIMEOUT_SECONDS" --values $CHARTS_DIR/${{ matrix.example }}/${value_file} $RELEASE_NAME $CHARTS_DIR/${{ matrix.example }} ; then
            echo "Failed to install chart ${{ matrix.example }}"
            echo "skip_validate=true" >> $GITHUB_ENV
            exit 1
          fi
          sleep 120

      - name: Validate e2e test
        if: always()
        run: |
          if $skip_validate; then
            echo "Skip validate"
          else
            .github/workflows/scripts/e2e/chart_test.sh validate_${{ matrix.example }} $RELEASE_NAME $NAMESPACE
          fi

      - name: Helm uninstall
        if: always()
        run: |
          if $should_cleanup; then
            helm uninstall $RELEASE_NAME --namespace $NAMESPACE
            if ! kubectl delete ns $NAMESPACE --timeout=$KUBECTL_TIMEOUT_SECONDS; then
              kubectl delete pods --namespace $NAMESPACE --force --grace-period=0 --all
              kubectl delete ns $NAMESPACE --force --grace-period=0 --timeout=$KUBECTL_TIMEOUT_SECONDS
            fi
          fi
