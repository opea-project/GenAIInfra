# Copyright (C) 2024 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

# Default values for retriever-usvc.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

# Set it as a non-null string, such as true, if you want to enable logging.
LOGFLAG: ""

# retriever-usvc needs to use different vector-DB backend service, e.g. Redis, Milvus
# Default is to use Redis as vector-DB backend
RETRIEVER_BACKEND: "REDIS"
REDIS_HOST: ""
REDIS_PORT: 6379
REDIS_SSL: false
REDIS_PASSWORD: ""
REDIS_USERNAME: ""
INDEX_NAME: "rag_redis"

# Uncomment and set the following settings to use Milvus as vector-DB backend
# RETRIEVER_BACKEND: "MILVUS"
MILVUS_HOST: ""
MILVUS_PORT: 19530
COLLECTION_NAME: "rag_milvus"

# Uncomment and set the following settings to use Qdrant as vector-DB backend
# RETRIEVER_BACKEND: "QDRANT"
QDRANT_HOST: ""
QDRANT_PORT: 6333
QDRANT_EMBED_DIMENSION: 768
QDRANT_INDEX_NAME: "rag_qdrant"

# retriever-usvc can do embedding locally or talk to remote TEI service to do embedding.
# TEI_EMBEDDING_ENDPOINT takes precedence over LOCAL_EMBEDDING_MODEL.
# text embedding inference service URL, e.g. http://<service-name>:<port>
TEI_EMBEDDING_ENDPOINT: ""
# local embedding model
LOCAL_EMBEDDING_MODEL: ""

image:
  repository: opea/retriever
  # Uncomment the following line to set desired image pull policy if needed, as one of Always, IfNotPresent, Never.
  # pullPolicy: ""
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext:
  # NOTE: many dependent python modules(e.g. numpy, mpl, haystack, etc.) need to write to local disk
  readOnlyRootFilesystem: false
  allowPrivilegeEscalation: false
  runAsNonRoot: true
  runAsUser: 1000
  capabilities:
    drop:
    - ALL
  seccompProfile:
    type: RuntimeDefault

port: 7000
service:
  type: ClusterIP
  # The default port for retriever service is 7000
  port: 7000

resources:
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  requests:
    cpu: 100m
    memory: 128Mi

readinessProbe:
  httpGet:
    path: v1/health_check
    port: retriever-usvc
  initialDelaySeconds: 5
  periodSeconds: 5
startupProbe:
  httpGet:
    path: v1/health_check
    port: retriever-usvc
  initialDelaySeconds: 5
  periodSeconds: 5
  failureThreshold: 120

nodeSelector: {}

tolerations: []

affinity: {}

tdxEnabled: false

global:
  http_proxy: ""
  https_proxy: ""
  no_proxy: ""
  HUGGINGFACEHUB_API_TOKEN: "insert-your-huggingface-token-here"
  # service account name to be shared with all parent/child charts.
  # If set, it will overwrite serviceAccount.name.
  # If set, and serviceAccount.create is false, it will assume this service account is already created by others.
  sharedSAName: ""

  # Install Prometheus serviceMonitor for service
  monitoring: false

  # Prometheus Helm install release name for serviceMonitor
  prometheusRelease: prometheus-stack

# For CI tests only
tei:
  enabled: false
milvus:
  enabled: false
redis-vector-db:
  enabled: false
qdrant:
  enabled: false
