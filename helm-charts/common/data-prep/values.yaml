# Copyright (C) 2024 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

# Default values for data-prep.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

autodependency:
  enabled: false

replicaCount: 1

image:
  repository: opea/dataprep-redis:latest
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  # tag: "1.0"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext:
  readOnlyRootFilesystem: false
  allowPrivilegeEscalation: false
  runAsNonRoot: true
  runAsUser: 1000
  capabilities:
    drop:
    - ALL
  seccompProfile:
    type: RuntimeDefault

service:
  type: ClusterIP
  # The following need to be modified after GenAIComps bug #282 is resolved.
  # https://github.com/opea-project/GenAIComps/issues/282
  ports:
  # The default port for data prep service is 6007
  - port: 6007
    targetPort: 6007
    name: data-prep
  - port: 6008
    targetPort: 6008
    name: data-prep-get
  - port: 6009
    targetPort: 6009
    name: data-prep-delete

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

livenessProbe:
  httpGet:
    path: v1/health_check
    port: data-prep
  initialDelaySeconds: 5
  periodSeconds: 5
  failureThreshold: 24
readinessProbe:
  httpGet:
    path: v1/health_check
    port: data-prep
  initialDelaySeconds: 5
  periodSeconds: 5
startupProbe:
  httpGet:
    path: v1/health_check
    port: data-prep
  initialDelaySeconds: 5
  periodSeconds: 5
  failureThreshold: 120

nodeSelector: {}

tolerations: []

affinity: {}

# text embedding inference service URL, e.g. http://<service-name>:<port>
TEI_EMBEDDING_ENDPOINT: ""

# local embedder's model
EMBED_MODEL: ""

# redis DB service URL, e.g. redis://<service-name>:<port>
REDIS_URL: ""
INDEX_NAME: "rag-redis"

global:
  http_proxy: ""
  https_proxy: ""
  no_proxy: ""
  HUGGINGFACEHUB_API_TOKEN: "insert-your-huggingface-token-here"
  LANGCHAIN_TRACING_V2: false
  LANGCHAIN_API_KEY: "insert-your-langchain-key-here"
